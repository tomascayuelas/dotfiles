(defwidget bar []
  (centerbox :orientation "h"
    (workspaces)
    (music)
    (sidestuff)))

(defwidget sidestuff []
  (box :class "sidestuff" :orientation "h" :space-evenly false :halign "end"
    (time)))

; eww is natively able to parse the JSON output of `leftwm-state`
; since eww also has the ability of `for` loops there is no need for a `liquid` template anymore
(defwidget workspaces []
    (box :class "workspaces"
         :orientation "h"
         :space-evenly true
         :halign "start"
         :spacing 10
      (box
        (for tag in '${wmstate.workspaces[0].tags}'
          (button
            :class {tag.mine ? "ws-button-mine" :
                    tag.visible ? "ws-button-visible" :
                    tag.urgent ? "ws-button-urgent" :
                    tag.busy ? "ws-button-busy" : "ws-button"}
            :onclick "leftwm-command \"SendWorkspaceToTag 0 ${tag.index}\""
            {!tag.mine && !tag.busy && !tag.visible && !tag.urgent ?  "Â·" : "${tag.name}"})))))

(defwidget music []
  (box :class "music"
       :orientation "h"
       :space-evenly false
       :halign "center"
    {music != "" ? "ðŸŽµ${music}" : ""}))

(defwidget time []
  (box :class "time" {time}))

(deflisten music :initial ""
  "playerctl --follow metadata --format '{{ artist }} - {{ title }}' || true")

(defpoll time :interval "10s"
  "date '+%H:%M %b %d, %Y'")

(deflisten wmstate 
           :initial '{"workspaces":[{"layout":"","tags":[{"name":"","index":0,"mine":false,"busy":false,"visible":false,"urgent":false}]}]}'
           "leftwm state")

(defwindow bar0
  :monitor 0
  :windowtype "dock"
  :geometry (geometry :x "0%"
                      :y "0%"
                      :width "100%"
                      :height "10px"
                      :anchor "top center")
  :reserve (struts :side "top" :distance "2%")
  (bar))
